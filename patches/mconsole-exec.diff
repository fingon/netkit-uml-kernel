#
# Minimalist mconsole exec patch 
#
# 3.10 version (with bit more synchronous behavior) by fingon at iki dot fi
# Adaptation to kernel 3.3.8 made by David Fern√°ndez (david at dit.upm.es) for 
# Starting point: mconsole-exec-2.6.30.patch for kernel 2.6.30
# Author of original patch: Paolo Giarrusso, aka Blaisorblade 
#                           (http://www.user-mode-linux.org/~blaisorblade)
#
# Known misfeatures:
#
# - If output is too long, blocks (and breaks horribly) 
# (this misfeature from 3.10 patches, when minimalizing the patch;
#  workaround: redirect to a shared filesystem if long output is expected)
#
# - Nothing useful is done with stdin
#
diff -ur linux-4.5.1.orig/arch/um/drivers/mconsole.h linux-4.5.1/arch/um/drivers/mconsole.h
--- linux-4.5.1.orig/arch/um/drivers/mconsole.h	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/arch/um/drivers/mconsole.h	2016-04-15 10:53:07.484294432 +0300
@@ -85,6 +85,7 @@
 extern void mconsole_stop(struct mc_request *req);
 extern void mconsole_go(struct mc_request *req);
 extern void mconsole_log(struct mc_request *req);
+extern void mconsole_exec(struct mc_request *req);
 extern void mconsole_proc(struct mc_request *req);
 extern void mconsole_stack(struct mc_request *req);
 
diff -ur linux-4.5.1.orig/arch/um/drivers/mconsole_kern.c linux-4.5.1/arch/um/drivers/mconsole_kern.c
--- linux-4.5.1.orig/arch/um/drivers/mconsole_kern.c	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/arch/um/drivers/mconsole_kern.c	2016-04-15 10:53:07.484294432 +0300
@@ -4,6 +4,7 @@
  * Licensed under the GPL
  */
 
+#include "linux/kmod.h"
 #include <linux/console.h>
 #include <linux/ctype.h>
 #include <linux/string.h>
@@ -24,6 +25,7 @@
 #include <linux/fs.h>
 #include <linux/mount.h>
 #include <linux/file.h>
+#include <linux/completion.h>
 #include <asm/uaccess.h>
 #include <asm/switch_to.h>
 
@@ -121,6 +123,59 @@
 	mconsole_reply(req, "", 0, 0);
 }
 
+void mconsole_exec(struct mc_request *req)
+{
+  struct subprocess_info *sub_info;
+  int res, len;
+  struct file *out;
+  char buf[MCONSOLE_MAX_DATA];
+
+  char *envp[] = {
+    "HOME=/", "TERM=linux",
+    "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin",
+    NULL
+  };
+  char *argv[] = {
+    "/bin/sh", "-c",
+    req->request.data + strlen("exec "),
+    NULL
+  };
+
+  sub_info = call_usermodehelper_setup("/bin/sh", argv, envp, GFP_ATOMIC, NULL, NULL, NULL);
+  if (sub_info == NULL) {
+    mconsole_reply(req, "call_usermodehelper_setup failed", 1, 0);
+    return;
+  }
+  res = call_usermodehelper_stdoutpipe(sub_info, &out);
+  if (res < 0) {
+    kfree(sub_info);
+    mconsole_reply(req, "call_usermodehelper_stdoutpipe failed", 1, 0);
+    return;
+  }
+
+  res = call_usermodehelper_exec(sub_info, UMH_WAIT_PROC);
+  if (res < 0) {
+    kfree(sub_info);
+    mconsole_reply(req, "call_usermodehelper_exec failed", 1, 0);
+    return;
+  }
+
+  for (;;) {
+    len = __vfs_read(out, buf, sizeof(buf), &out->f_pos);
+    if (len < 0) {
+      mconsole_reply(req, "reading output failed", 1, 0);
+      break;
+    }
+    if (len == 0)
+      break;
+    mconsole_reply_len(req, buf, len, 0, 1);
+  }
+  fput(out);
+
+  mconsole_reply_len(req, NULL, 0, 0, 0);
+}
+
+
 void mconsole_proc(struct mc_request *req)
 {
 	struct vfsmount *mnt = task_active_pid_ns(current)->proc_mnt;
@@ -187,6 +242,7 @@
     stop - pause the UML; it will do nothing until it receives a 'go' \n\
     go - continue the UML after a 'stop' \n\
     log <string> - make UML enter <string> into the kernel log\n\
+    exec <string> - pass <string> to /bin/sh -c synchronously\n\
     proc <file> - returns the contents of the UML's /proc/<file>\n\
     stack <pid> - returns the stack of the specified pid\n\
 "
diff -ur linux-4.5.1.orig/arch/um/drivers/mconsole_user.c linux-4.5.1/arch/um/drivers/mconsole_user.c
--- linux-4.5.1.orig/arch/um/drivers/mconsole_user.c	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/arch/um/drivers/mconsole_user.c	2016-04-15 10:53:07.484294432 +0300
@@ -30,6 +30,7 @@
 	{ "stop", mconsole_stop, MCONSOLE_PROC },
 	{ "go", mconsole_go, MCONSOLE_INTR },
 	{ "log", mconsole_log, MCONSOLE_INTR },
+	{ "exec", mconsole_exec, MCONSOLE_PROC },
 	{ "proc", mconsole_proc, MCONSOLE_PROC },
 	{ "stack", mconsole_stack, MCONSOLE_INTR },
 };
diff -ur linux-4.5.1.orig/arch/um/os-Linux/file.c linux-4.5.1/arch/um/os-Linux/file.c
--- linux-4.5.1.orig/arch/um/os-Linux/file.c	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/arch/um/os-Linux/file.c	2016-04-15 10:53:07.484294432 +0300
@@ -554,6 +554,8 @@
 
 	addr.sun_family = AF_UNIX;
 
+	if (len > sizeof(addr.sun_path))
+		len = sizeof(addr.sun_path);
 	snprintf(addr.sun_path, len, "%s", file);
 
 	err = bind(sock, (struct sockaddr *) &addr, sizeof(addr));
diff -ur linux-4.5.1.orig/include/linux/kmod.h linux-4.5.1/include/linux/kmod.h
--- linux-4.5.1.orig/include/linux/kmod.h	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/include/linux/kmod.h	2016-04-15 10:53:07.484294432 +0300
@@ -62,6 +62,7 @@
 	int wait;
 	int retval;
 	int (*init)(struct subprocess_info *info, struct cred *new);
+	struct file *stdout;
 	void (*cleanup)(struct subprocess_info *info);
 	void *data;
 };
@@ -102,4 +103,6 @@
 extern long usermodehelper_read_lock_wait(long timeout);
 extern void usermodehelper_read_unlock(void);
 
+int call_usermodehelper_stdoutpipe(struct subprocess_info *sub_info, struct file **filp);
+
 #endif /* __LINUX_KMOD_H__ */
diff -ur linux-4.5.1.orig/kernel/kmod.c linux-4.5.1/kernel/kmod.c
--- linux-4.5.1.orig/kernel/kmod.c	2016-04-12 18:57:08.000000000 +0300
+++ linux-4.5.1/kernel/kmod.c	2016-04-15 10:55:47.865871302 +0300
@@ -39,6 +39,7 @@
 #include <linux/rwsem.h>
 #include <linux/ptrace.h>
 #include <linux/async.h>
+#include <linux/pipe_fs_i.h>
 #include <asm/uaccess.h>
 
 #include <trace/events/module.h>
@@ -158,7 +159,7 @@
 	 * would be to run the parents of this process, counting how many times
 	 * kmod was invoked.  That would mean accessing the internals of the
 	 * process tables to get the command line, proc_pid_cmdline is static
-	 * and it is not worth changing the proc code just to handle this case. 
+	 * and it is not worth changing the proc code just to handle this case.
 	 * KAO.
 	 *
 	 * "trace the ppid" is simple, but will fail if someone's
@@ -222,6 +223,28 @@
 	flush_signal_handlers(current, 1);
 	spin_unlock_irq(&current->sighand->siglock);
 
+        /* Install output when needed */
+        if (sub_info->stdout) {
+                struct files_struct *f = current->files;
+                struct fdtable *fdt;
+
+                sys_close(1);
+                sys_close(2);
+                get_file(sub_info->stdout);
+                fd_install(1, sub_info->stdout);
+                fd_install(2, sub_info->stdout);
+                spin_lock(&f->file_lock);
+                fdt = files_fdtable(f);
+                __set_bit(1, fdt->open_fds);
+                __clear_bit(1, fdt->close_on_exec);
+                __set_bit(2, fdt->open_fds);
+                __clear_bit(2, fdt->close_on_exec);
+                spin_unlock(&f->file_lock);
+
+                /* disallow core files */
+                current->signal->rlim[RLIMIT_CORE] = (struct rlimit){0, 0};
+        }
+
 	/*
 	 * Our parent (unbound workqueue) runs with elevated scheduling
 	 * priority. Avoid propagating that into the userspace child.
@@ -540,6 +563,20 @@
 }
 EXPORT_SYMBOL(call_usermodehelper_setup);
 
+int call_usermodehelper_stdoutpipe(struct subprocess_info *sub_info,
+                                 struct file **filp)
+{
+  struct file *f[2];
+
+  if (create_pipe_files(f, 0)<0)
+    return PTR_ERR(f);
+  sub_info->stdout = f[1];
+  *filp = f[0];
+  return 0;
+}
+EXPORT_SYMBOL(call_usermodehelper_stdoutpipe);
+
+
 /**
  * call_usermodehelper_exec - start a usermode application
  * @sub_info: information about the subprocessa
